"""
@Project: Math Mandrill
@Version: 1.2
@Author: Alwin Prabu
@School: Watford UTC
"""
#Dependencies:
#   users.txt  - user database
#   score.txt  - score database
#   leaguetable.txt - league database
#   rank.txt - ranks database
#   MathsMandrill.kv - Kivy UI file
#   comic.ttf  - fonts

# Python imports required 
from kivy.app import App
from kivy.base import runTouchApp
from kivy.lang import Builder
from kivy.properties import ListProperty, ObjectProperty, StringProperty
from kivy.config import Config
from kivy.core.text import Label 
from kivy.uix.screenmanager import ScreenManager, Screen, FadeTransition
import time
import random
import operator
from random import randint

# Screen size configuration 
Config.set('graphics', 'width', '852')
Config.set('graphics', 'height', '480')
Config.write()

# Next Question generator as per specification rules 
def nextQuestion():
	n1 = 0
	n2 = 0
	arith = { "+": operator.add, "-": operator.sub, "x": operator.mul, "/": operator.truediv }
	nextQ = ()
	while nextQ == ():
		symbol, oper = random.choice(list(arith.items()))
		n1 = randint(1, 12)
		n2 = randint(1, 12)	
		if n1 < n2 :
			n2, n1 = n1, n2
		result = arith[symbol](n1,n2)
		if n1 % n2 == 0:
			nextQ = (n1, symbol, n2, int(result))
	return nextQ

# All 10 Q&A for this game session 
def gameSession():
	qn = 0
	qalist = []
	while qn <= 11:
		mytup = nextQuestion() 
		qalist.append(mytup)
		qn = qn+1
	return qalist
myqalist = gameSession()

# Add score to the score.txt file
def add_score(self, flag, *args):
    file = open("score.txt","a")  
    if flag == "1" :
        file.write("1+")
    file.close()  
    return 

# First screen class with check login function
class FirstScreen(Screen):
    text = ObjectProperty("afdas")
    def __init__(self, **kwargs):
        super(FirstScreen, self).__init__(**kwargs) 
  
    def check_login(self, un, pw, *args):
        auth = "0"
        file = open('users.txt','r')
        name_in = un
        pass_in = pw
        for line in file: 
            if line != "\n" or "":                  
                entry = line.split(',')         
                name = entry[0]                 
                pass_raw = entry[1].split('\n') 
                password = pass_raw[0]          
                if name == name_in:
                    if pass_in == password:
                        auth = "1"          
        file.close()
        self.text = auth
        return self.text

# Registration screen class with create user account function
class RegistrationScreen(Screen):
    text = ObjectProperty("afdas")
    def __init__(self, **kwargs):
        super(RegistrationScreen, self).__init__(**kwargs) 
  
    def create_account(self, un, pw, *args):
        prefix = "\n"
        if un == "" or pw == "":
            self.text = "0"
        else:
            file = open('users.txt','a')
            file.write(prefix + un +','+ pw + '\n')           
            file.close()
            self.text = "1"
        return self.text

# Error Screen class - no functions needed (auto generated by Kivy UI definitions)
class ErrorScreen(Screen):
    pass

# Error Level class - no functions needed (auto generated by Kivy UI definitions)
class LevelScreen(Screen):
    pass	

# Game Screen class - with get next questions function	
class GameScreen(Screen):
    text = ObjectProperty("afdas")

    def __init__(self, **kwargs):
        super(GameScreen, self).__init__(**kwargs)	 

    def next_question(self, qn, *args):
        mytup = myqalist[int(qn)]
        Qalone = str(mytup[0]) + " " + str(mytup[1]) + " " + str(mytup[2]) 
        self.text = Qalone
        return self.text 

# Feedback Screen class - with 5 function	
class FeedbackScreen(Screen):   
    text = ObjectProperty("afdas")
    
    def __init__(self, **kwargs):
        super(FeedbackScreen, self).__init__(**kwargs) 
  
    def correct_answer(self, qn, *args):
        mytup = myqalist[int(qn)]
        self.text = str(mytup[3])
        return self.text 

    def check_answer(self, n1, n2, *args):
        if n1 == n2:
            self.text = "Bravo! You got it correct!"            
        else:
            self.text = "Oops, Wrong answer!" 
        return self.text 

    def set_text_colour(self, n1, n2, *args):
        if n1 == n2:
            self.text_colour = [0,0,1,1]
            add_score(self,"1")
        else:
            self.text_colour = [1,0,0,1]
        return self.text_colour

    def select_image(self, n1, n2, *args):
        if n1 == n2:
            self.source = 'images/correct.png'            
        else:
            self.source = 'images/error.png'
        return self.source

    def load_next(self, qn, *args):
        if int(qn) <=10 :
            self.source = 'images/clock.png'
        else:
            self.source = 'images/clock.png'    
        return self.source

# Score Screen class - with 4 function	
class ScoreScreen(Screen):
    text = ObjectProperty("afdas")
    def __init__(self, **kwargs):
        super(ScoreScreen, self).__init__(**kwargs) 

    def reset_questions(self, *args):
        global myqalist
        myqalist = gameSession()
        return   

    def get_score(self, qn, *args):
	    file = open("score.txt","r")  
	    scorelist= file.readline()
	    score = scorelist.strip()
	    score = scorelist.split('+')
	    score = score[ : -1]
	    myscore = 0
	    for i in range(len(score)):
		    myscore = myscore + int(score[i])
	    file.close()             
	    return str(int(int(myscore)/2))

    def write_score(self, un, scr, *args):
        prefix = "\n"
        if un == "" or scr == "":
            self.text = "0"            
        else:
            file = open('leaguetable.txt','a')             
            file.write(prefix + un +','+ scr + '\n')           
            file.close()
            self.text = "1"
        return self.text

    def reset_score(self, *args):
	    open("score.txt","w").close()          
	    return 

# Score Screen class - with create and get rank functions	
class RankScreen(Screen):
    text = ObjectProperty("afdas")
    def __init__(self, **kwargs):
        super(RankScreen, self).__init__(**kwargs) 	
    
    def create_rank(self, *args):
        out = open('leaguetable.txt','r')
        scores = []
        for line in out:
            if line != "\n":
                split = line.split(',')
                split2 = split[1].split('\n')
                scores.append((split[0],int(split2[0])))
        sort_scores = sorted(scores,reverse = True, key= lambda l: (float(l[1])))
        out.close()
        top5 = 0
        ranks = ""
        if len(sort_scores) >= 5:
            while top5 < 5:
                nstring = str(top5+1)+'.  Name: '+ sort_scores[top5][0] + ',   Score: ' +  str(sort_scores[top5][1]) + '|'
                ranks = ranks + nstring
                top5+=1
        else:
            for score in range(len(sort_scores)):
                nstring = str(top5+1)+'.  Name: '+sort_scores[top5][0] + ',   Score: '+ str(sort_scores[top5][1]) + '|'
                ranks = ranks + nstring
                top5+=1
        file = open('ranks.txt','w')  
        file.write(ranks)
        file.close() 
        self.text = "done"       
        return self.text     
    
    def get_rank(self, ro, *args):
        out = open('ranks.txt','r')
        for line in out:
            if line != "\n":
                split = line.split('|')
                splito = split[ro-1].split('\n')
                rankout = str(splito)
                self.text = rankout[2:-2]
        out.close()
        return self.text  

# Kivy Screen manager that manages all screens and has global variables
class ScreenManagement(ScreenManager):
    UNAME = StringProperty('')
    UPASS = StringProperty('Eask92')
    ULEVEL = StringProperty('0')
    UINPUT = StringProperty('0')
    UCHOICE = StringProperty('1')
    QNUM = StringProperty('1')
    SCORE = StringProperty('0')
    FULLINPUT = StringProperty('0')

# Main game starter class with build UI from .kv file
class MathsMandrillApp(App):
    def build(self):
        return Builder.load_file("MathsMandrill.kv")
		
if __name__ == "__main__":
	MathsMandrillApp().run()